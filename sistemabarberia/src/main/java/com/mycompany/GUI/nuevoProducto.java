/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.GUI;

import com.mycompany.sistemabarberia.JPACOntrollers.precioshistoricosproductosJpaController;
import com.mycompany.sistemabarberia.JPACOntrollers.productosJpaController;
import com.mycompany.sistemabarberia.JTextFieldLimit;
import com.mycompany.sistemabarberia.Validaciones;
import com.mycompany.sistemabarberia.precioshistoricosproductos;
import com.mycompany.sistemabarberia.productos;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author Jonathan Laux
 */
public class nuevoProducto extends javax.swing.JFrame {
    
    private EntityManagerFactory emf = Persistence.createEntityManagerFactory("servidorbd");
    private productos productoModificar;
    private boolean modificar;
    
    private precioshistoricosproductosJpaController preciosDAO = new precioshistoricosproductosJpaController(emf);
    private productosJpaController productoDAO = new productosJpaController(emf);
    private Validaciones validar = new Validaciones();
    private List<productos> productosEnBd = productoDAO.findproductosEntities();
    private ImageIcon imagen;
    private Icon icono;
    private java.util.Date dt = new java.util.Date();
    private java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
    String currentTime = sdf.format(dt);
    Border redBorder = BorderFactory.createLineBorder(Color.RED,1);
    Border greenBorder = BorderFactory.createLineBorder(Color.GREEN,1);
    Border defaultBorder = new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true);


    /**
     * Creates new form nuevoTipoDescuento
     */
    public nuevoProducto() {
        initComponents();
         this.setLocationRelativeTo(null);
        Image icon = new ImageIcon(getClass().getResource("/Imagenes/logoBarberia.jpeg")).getImage();
        setIconImage(icon);
        this.insertarImagen(this.logo,"/Imagenes/logoBarberia.png");
        Reiniciar();    
    }
    
    //constructor para modificar un producto
    public nuevoProducto(productos productoModificar)
    {
        initComponents();
        tituloPantalla.setText("MODIFICAR PRODUCTO");
        this.setLocationRelativeTo(null);
       Image icon = new ImageIcon(getClass().getResource("/Imagenes/logoLogin.png")).getImage();
        setIconImage(icon);
        this.insertarImagen(this.logo,"/Imagenes/logoBarberia.png");
        Reiniciar(); 
        this.productoModificar = productoModificar;
        stockInicial.setEnabled(false);
        precioInicial.setEnabled(false);
        cargarDatosProducto();
        idProducto.setText("Id de producto: " + productoModificar.getIdproducto());
    }
    
    public void Reiniciar()
    {
        List<productos> productosEnBd = productoDAO.findproductosEntities();
        if (productosEnBd.isEmpty())
        {
            idProducto.setText("  ID de Producto: 1");
        }else
        {
            idProducto.setText("  ID de Producto: " + Integer.toString(productosEnBd.get(productosEnBd.size()-1).getIdproducto()+1));
        } 
        
        nombreProducto.setText("Nuevo Producto");
        precioInicial.setText("Precio");
        nombreProducto.setBorder(defaultBorder);
        precioInicial.setBorder(defaultBorder);
        stockInicial.setBorder(defaultBorder);
        stockMinimo.setBorder(defaultBorder);
        stockMaximo.setBorder(defaultBorder);
        formatoInvalido.setVisible(false);
        formatoInvalido2.setVisible(false);
        formatoInvalido3.setVisible(false);
        stockInicial.setText("");
        stockMinimo.setText("");
        stockMaximo.setText("");
    }
    
    public void cargarDatosProducto()
    {
        nombreProducto.setText(productoModificar.getNomProducto());
        stockMinimo.setText(Integer.toString(productoModificar.getStockMinimo()));
        stockMaximo.setText(Integer.toString(productoModificar.getStockMaximo()));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tituloPantalla = new javax.swing.JLabel();
        botonAceptar = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        idProducto = new javax.swing.JTextField();
        formatoInvalido = new javax.swing.JLabel();
        precioInicial = new javax.swing.JTextField();
        nombreProducto = new javax.swing.JTextField();
        formatoInvalido2 = new javax.swing.JLabel();
        Stock = new javax.swing.JLabel();
        stockInicial = new javax.swing.JTextField();
        stockMinimo = new javax.swing.JTextField();
        stockMaximo = new javax.swing.JTextField();
        actualLabel = new javax.swing.JLabel();
        minimoLabel = new javax.swing.JLabel();
        maximoLabel = new javax.swing.JLabel();
        formatoInvalido3 = new javax.swing.JLabel();
        salir = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(20, 17, 17));
        jPanel1.setPreferredSize(new java.awt.Dimension(486, 680));

        tituloPantalla.setFont(new java.awt.Font("Gadugi", 1, 24)); // NOI18N
        tituloPantalla.setForeground(new java.awt.Color(255, 255, 255));
        tituloPantalla.setText("NUEVO PRODUCTO");

        botonAceptar.setBackground(new java.awt.Color(189, 158, 76));
        botonAceptar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        botonAceptar.setText("ACEPTAR");
        botonAceptar.setRequestFocusEnabled(false);
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });

        logo.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(55, 53, 53));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel2.setMaximumSize(new java.awt.Dimension(429, 510));
        jPanel2.setMinimumSize(new java.awt.Dimension(429, 510));

        jPanel3.setBackground(new java.awt.Color(55, 53, 53));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel3.setMaximumSize(new java.awt.Dimension(358, 444));
        jPanel3.setMinimumSize(new java.awt.Dimension(358, 444));

        idProducto.setEditable(false);
        idProducto.setBackground(new java.awt.Color(30, 33, 34));
        idProducto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        idProducto.setForeground(new java.awt.Color(255, 255, 255));
        idProducto.setText(" Id de Producto");
        idProducto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        idProducto.setSelectionColor(new java.awt.Color(55, 53, 53));
        idProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idProductoActionPerformed(evt);
            }
        });

        formatoInvalido.setForeground(new java.awt.Color(255, 255, 255));
        formatoInvalido.setText("Formato no valido.");

        precioInicial.setBackground(new java.awt.Color(30, 33, 34));
        precioInicial.setDocument(new JTextFieldLimit(7));
        precioInicial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        precioInicial.setForeground(new java.awt.Color(255, 255, 255));
        precioInicial.setText("Precio Inicial");
        precioInicial.setToolTipText("Ingrese un precio de producto v√°lido.");
        precioInicial.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        precioInicial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                precioInicialFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                precioInicialFocusLost(evt);
            }
        });
        precioInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioInicialActionPerformed(evt);
            }
        });
        precioInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                precioInicialKeyTyped(evt);
            }
        });

        nombreProducto.setBackground(new java.awt.Color(30, 33, 34));
        nombreProducto.setDocument(new JTextFieldLimit(25));
        nombreProducto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreProducto.setForeground(new java.awt.Color(255, 255, 255));
        nombreProducto.setText("Nombre del Producto");
        nombreProducto.setToolTipText("Ingrese un nombre de producto valido.");
        nombreProducto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        nombreProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nombreProductoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nombreProductoFocusLost(evt);
            }
        });
        nombreProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreProductoActionPerformed(evt);
            }
        });
        nombreProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreProductoKeyTyped(evt);
            }
        });

        formatoInvalido2.setForeground(new java.awt.Color(255, 255, 255));
        formatoInvalido2.setText("Formato no valido.");

        Stock.setForeground(new java.awt.Color(255, 255, 255));
        Stock.setText("Stock");

        stockInicial.setBackground(new java.awt.Color(30, 33, 34));
        stockInicial.setDocument(new JTextFieldLimit(4));
        stockInicial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stockInicial.setForeground(new java.awt.Color(255, 255, 255));
        stockInicial.setToolTipText("Stock inicial.");
        stockInicial.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        stockInicial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                stockInicialFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                stockInicialFocusLost(evt);
            }
        });
        stockInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockInicialActionPerformed(evt);
            }
        });
        stockInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stockInicialKeyTyped(evt);
            }
        });

        stockMinimo.setBackground(new java.awt.Color(30, 33, 34));
        stockMinimo.setDocument(new JTextFieldLimit(4));
        stockMinimo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stockMinimo.setForeground(new java.awt.Color(255, 255, 255));
        stockMinimo.setToolTipText("Stock m√≠nimo.");
        stockMinimo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        stockMinimo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                stockMinimoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                stockMinimoFocusLost(evt);
            }
        });
        stockMinimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockMinimoActionPerformed(evt);
            }
        });
        stockMinimo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stockMinimoKeyTyped(evt);
            }
        });

        stockMaximo.setBackground(new java.awt.Color(30, 33, 34));
        stockMaximo.setDocument(new JTextFieldLimit(4));
        stockMaximo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stockMaximo.setForeground(new java.awt.Color(255, 255, 255));
        stockMaximo.setToolTipText("Stock m√°ximo.");
        stockMaximo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        stockMaximo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                stockMaximoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                stockMaximoFocusLost(evt);
            }
        });
        stockMaximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockMaximoActionPerformed(evt);
            }
        });
        stockMaximo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stockMaximoKeyTyped(evt);
            }
        });

        actualLabel.setForeground(new java.awt.Color(255, 255, 255));
        actualLabel.setText("Inicial");

        minimoLabel.setForeground(new java.awt.Color(255, 255, 255));
        minimoLabel.setText("Minimo");

        maximoLabel.setForeground(new java.awt.Color(255, 255, 255));
        maximoLabel.setText("Maximo");

        formatoInvalido3.setForeground(new java.awt.Color(255, 255, 255));
        formatoInvalido3.setText("Formato Invalido");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formatoInvalido3)
                    .addComponent(formatoInvalido2)
                    .addComponent(precioInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatoInvalido)
                    .addComponent(idProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(nombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(actualLabel)
                                .addComponent(stockInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(56, 56, 56)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(minimoLabel)
                                .addComponent(stockMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(maximoLabel)
                                .addComponent(stockMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(Stock, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(42, 42, 42))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(idProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(formatoInvalido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(Stock)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stockInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualLabel)
                    .addComponent(minimoLabel)
                    .addComponent(maximoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(formatoInvalido3)
                .addGap(18, 18, 18)
                .addComponent(formatoInvalido2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precioInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/x.png"))); // NOI18N
        salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salirMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(tituloPantalla))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(botonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tituloPantalla)))
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(botonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
       try{
       if(productoModificar!=null)
        {
             if(nombreProducto.getText().equals("Nuevo Producto") || stockMinimo.getText().equals("") || 
                     stockMaximo.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Debes rellenar todos los campos.","Datos inv√°lidos",JOptionPane.ERROR_MESSAGE);
            return;
        }
             
             if(!validacionStock() || !validacionCampos())
             {
                 JOptionPane.showMessageDialog(null, "Por favor, corrige los campos en rojo.","Datos inv√°lidos",JOptionPane.ERROR_MESSAGE);
                 return;
             }
             productoModificar.setNomProducto(nombreProducto.getText());
             productoModificar.setStockMaximo(Integer.parseInt(stockMaximo.getText()));
             productoModificar.setStockMinimo(Integer.parseInt(stockMinimo.getText()));
              for(int i=0; i < productosEnBd.size();i++)
        {
            if(productoModificar.getNomProducto().equalsIgnoreCase(productosEnBd.get(i).getNomProducto()))
            {
                if(productoModificar.getIdproducto() == productosEnBd.get(i).getIdproducto())
                {
                    
                }else
                {
                   nombreProducto.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Ese producto ya existe.");
            return;  
                }
            }
        } 
            try {
                productoDAO.edit(productoModificar);
                JOptionPane.showMessageDialog(this, "¬°Producto Modificado!");
            } catch (Exception ex) {
                Logger.getLogger(nuevoProducto.class.getName()).log(Level.SEVERE, null, ex);
            }
             
        }else
        {
             if(nombreProducto.getText().equals("Nuevo Producto") || stockInicial.getText().equals("") ||
                stockMinimo.getText().equals("") || stockMaximo.getText().equals("") || precioInicial.getText().equals("Precio"))
        {
            JOptionPane.showMessageDialog(null, "Debes rellenar todos los campos.","Datos inv√°lidos",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //anadir producto
        List<productos> productosEnBd = productoDAO.findproductosEntities();
        productos productoNuevo = new productos();
        productoNuevo.setNomProducto(nombreProducto.getText());
        productoNuevo.setActivo(true);
        productoNuevo.setStockActual(Integer.parseInt(stockInicial.getText()));
        productoNuevo.setStockMinimo(Integer.parseInt(stockMinimo.getText()));
        productoNuevo.setStockMaximo(Integer.parseInt(stockMaximo.getText()));


        //anadir precio 1
        precioshistoricosproductos precioUno = new precioshistoricosproductos();
        precioUno.setFechaInicial(Date.valueOf(currentTime));
        precioUno.setFechaFinal(null);
        try{
         precioUno.setPrecio(Double.parseDouble(precioInicial.getText()));}catch(NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(this,"Ingresa un precio v√°lido","Formato de precio incorrecto",JOptionPane.ERROR_MESSAGE);
            return;
        }
        precioUno.setActivo(true);
       
        
        if(Double.parseDouble(precioInicial.getText()) <= 0.00)
        {
            precioInicial.setBorder(redBorder);
            formatoInvalido2.setVisible(true);
            formatoInvalido2.setText("El precio debe ser mayor a 0.");
            return;
        }
        if(validacionCampos() && validarCampoNumerico() && validacionStock())
        {   
            try {
            productoDAO.create(productoNuevo); 
            List<productos> productos = productoDAO.findproductosEntities();
            precioUno.setIDProducto((productos.get(productos.size()-1)).getIdproducto());  
            preciosDAO.create(precioUno);    
            JOptionPane.showMessageDialog(null,"Operaci√≥n Exitosa.");
            Reiniciar();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,"No se pudo guardar el producto, excepci√≥n: " + ex.getMessage());
        }
        }else{JOptionPane.showMessageDialog(null, "Por favor, corrige los campos en rojo.","Datos inv√°lidos",JOptionPane.ERROR_MESSAGE);}
        }
       }catch(Exception ex){
           log(ex);
       }
    }//GEN-LAST:event_botonAceptarActionPerformed

    
    
    private void idProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idProductoActionPerformed
//a;adir validaciones botonaceptar
    private void precioInicialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_precioInicialFocusLost
        validarCampoNumerico();
    }//GEN-LAST:event_precioInicialFocusLost
    
    private void precioInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precioInicialActionPerformed

    private void precioInicialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioInicialKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_precioInicialKeyTyped

    private void precioInicialFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_precioInicialFocusGained
        // TODO add your handling code here:
        precioInicial.selectAll();
    }//GEN-LAST:event_precioInicialFocusGained

    private void nombreProductoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreProductoFocusGained
        // TODO add your handling code here:
        nombreProducto.selectAll();
    }//GEN-LAST:event_nombreProductoFocusGained

    private void nombreProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreProductoFocusLost
        // TODO add your handling code here:
        try{
        validacionCampos();
        }catch(Exception ex){
            log(ex);
        }
    }//GEN-LAST:event_nombreProductoFocusLost

    private void nombreProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreProductoActionPerformed

    private void nombreProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreProductoKeyTyped

    }//GEN-LAST:event_nombreProductoKeyTyped

    private void salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salirMouseClicked
        // TODO add your handling code here:
        try{
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pantallaProductos().setVisible(true);
            }
        });
        emf.close();
        this.setVisible(false);
        this.dispose(); 
        preciosDAO.close();
        productoDAO.close();
        }catch(Exception ex){
            log(ex);
        }
    }//GEN-LAST:event_salirMouseClicked

    private void stockInicialFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockInicialFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_stockInicialFocusGained

    private void stockInicialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockInicialFocusLost
        // TODO add your handling code here:
        try{
            validacionStock();
        }catch(Exception ex){
            log(ex);
        }
    }//GEN-LAST:event_stockInicialFocusLost

    private void stockInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockInicialActionPerformed

    private void stockInicialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockInicialKeyTyped

    }//GEN-LAST:event_stockInicialKeyTyped

    private void stockMinimoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockMinimoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_stockMinimoFocusGained

    private void stockMinimoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockMinimoFocusLost
        // TODO add your handling code here:
        try{
        validacionStock(); 
        }catch(Exception ex){
            log(ex);
        }
    }//GEN-LAST:event_stockMinimoFocusLost

    private void stockMinimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockMinimoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockMinimoActionPerformed

    private void stockMinimoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockMinimoKeyTyped
    
    }//GEN-LAST:event_stockMinimoKeyTyped

    private void stockMaximoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockMaximoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_stockMaximoFocusGained

    private void stockMaximoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stockMaximoFocusLost
        // TODO add your handling code here:
        try{
        validacionStock(); 
        }catch(Exception ex){
        log(ex);
        }
    }//GEN-LAST:event_stockMaximoFocusLost

    private void stockMaximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockMaximoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockMaximoActionPerformed

    private void stockMaximoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockMaximoKeyTyped
        // TODO add your handling code here      
    }//GEN-LAST:event_stockMaximoKeyTyped

    private boolean validacionCampos()
    {
        if(nombreProducto.getText().equals(""))
        {
            nombreProducto.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Debes ingresar un dato.");
            return false;
        }
        if(nombreProducto.getText().matches("^.*\\d+.*$"))
        {
            nombreProducto.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Solo se permite texto en este campo.");
            return false;
        }
        if(!nombreProducto.getText().matches("^[A-Z]{1}[\\w\\s]+$"))
        {
            nombreProducto.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("El producto debe iniciar con may√∫scula.");
            return false;
        }
        if(validar.validacionLetrasRepetidas(nombreProducto.getText()))
        {
            nombreProducto.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("No puedes repetir tantas letras.");
            return false;
        }
        
        if(!validar.validacionCadenaPalabras(nombreProducto.getText()))
        {
            nombreProducto.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Esa no es una palabra v√°lida.");
            return false;
        }
        if(!validar.validacionCantidadMinima(nombreProducto.getText(), 4))
        {
            nombreProducto.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("El producto debe ser de m√≠nimo 4 letras.");
            return false;
        }
        nombreProducto.setBorder(greenBorder);
        formatoInvalido.setVisible(false);
        return true;
    }
    
    private boolean validarCampoNumerico()
    {  
      double precio = 0 ;
        try{
            precio = Double.parseDouble(precioInicial.getText());
        }catch(NumberFormatException ex)
        {
            formatoInvalido2.setVisible(true);
            formatoInvalido2.setText("Solo puedes ingresar n√∫meros en este campo.");
            precioInicial.setBorder(redBorder);
            return false;
        }
       
        if(precio <= 0)
        {
            precioInicial.setBorder(redBorder);
            formatoInvalido2.setVisible(true);
            formatoInvalido2.setText("El precio debe ser mayor a 0.");
            return false;
        }
        
         precioInicial.setBorder(greenBorder);
         formatoInvalido2.setVisible(false);
         return true;
    }
    
    public boolean validacionStock()
    {
        int inicial = 0;
        int minimo = 0;
        int maximo = 0;
        try{
        inicial = Integer.parseInt(stockInicial.getText().equals("")?"0":stockInicial.getText());
        minimo = Integer.parseInt(stockMinimo.getText().equals("")?"0":stockMinimo.getText());
        maximo = Integer.parseInt(stockMaximo.getText().equals("")?"0":stockMaximo.getText());
        }catch(NumberFormatException ex)
        {
            formatoInvalido3.setVisible(true);
            formatoInvalido3.setText("Solo puedes ingresar n√∫mero enteros.");
            stockInicial.setBorder(redBorder);
            stockMinimo.setBorder(redBorder);
            stockMaximo.setBorder(redBorder);
            return false;
        }
        if(inicial > maximo)
        {
            formatoInvalido3.setVisible(true);
            formatoInvalido3.setText("Stock Inicial debe ser menor al m√°ximo.");
            stockInicial.setBorder(redBorder);
            return false;
        }
        if(minimo <= 0)
        {
           formatoInvalido3.setVisible(true);
           formatoInvalido3.setText("Stock minimo debe ser mayor a 0."); 
           stockMinimo.setBorder(redBorder);
           return false;
        }
        if(maximo <= 0)
        {
            formatoInvalido3.setVisible(true);
            formatoInvalido3.setText("Stock m√°ximo debe ser mayor a 0.");
            stockMaximo.setBorder(redBorder);
            return false;
        }
        if(minimo > maximo)
        {
            formatoInvalido3.setVisible(true);
            formatoInvalido3.setText("Stock m√≠nimo no puede ser mayor al m√°ximo.");
            stockMinimo.setBorder(redBorder);
            return false;
        }
        
        if( minimo < maximo && inicial <= maximo && minimo>0 && inicial>=0 && maximo>0)
        {
            stockInicial.setBorder(greenBorder);
            stockMinimo.setBorder(greenBorder);
            stockMaximo.setBorder(greenBorder);
            formatoInvalido3.setVisible(false);
            return true;   
        }else{return false;}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nuevoProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new nuevoProducto().setVisible(true);
            }
        });
        
        
    }
    
    
    
    private void insertarImagen(JLabel lbl,String ruta)
    {
        this.imagen = new ImageIcon(getClass().getResource(ruta));
        this.icono = new ImageIcon(
                this.imagen.getImage().getScaledInstance(
                        lbl.getWidth(), 
                        lbl.getHeight(),
                        Image.SCALE_DEFAULT)
        );
        lbl.setIcon(this.icono);
        this.repaint();
    }
    
    public boolean validarCamposEnBlanco(){
         if(nombreProducto.getText().equals("") || stockMinimo.getText().equals("") || 
                     stockMaximo.getText().equals("") || stockInicial.getText().equals("") || precioInicial.getText().equals(""))
        {
            return false;
        }else{return true;}
    }
    
    private void log(Exception ex){
        FileHandler fh;                              
            java.util.logging.Logger logger = java.util.logging.Logger.getLogger("Log");  
            try {
                Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                String ts = new SimpleDateFormat("dd MMMM yyyy HH.mm.ss").format(timestamp);
                fh = new FileHandler("../logs/"+ ts + " " + this.getClass().getName()+".txt" );
                logger.addHandler(fh);
                SimpleFormatter formatter = new SimpleFormatter();
                fh.setFormatter(formatter);
                logger.info(ex.getClass().toString() + " : " +ex.getMessage());
            } catch (SecurityException e) {  
                e.printStackTrace();  
            } catch (IOException e) {  
                e.printStackTrace();  
            } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Stock;
    private javax.swing.JLabel actualLabel;
    private javax.swing.JButton botonAceptar;
    private javax.swing.JLabel formatoInvalido;
    private javax.swing.JLabel formatoInvalido2;
    private javax.swing.JLabel formatoInvalido3;
    private javax.swing.JTextField idProducto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel maximoLabel;
    private javax.swing.JLabel minimoLabel;
    public javax.swing.JTextField nombreProducto;
    public javax.swing.JTextField precioInicial;
    private javax.swing.JLabel salir;
    public javax.swing.JTextField stockInicial;
    public javax.swing.JTextField stockMaximo;
    public javax.swing.JTextField stockMinimo;
    private javax.swing.JLabel tituloPantalla;
    // End of variables declaration//GEN-END:variables
}
