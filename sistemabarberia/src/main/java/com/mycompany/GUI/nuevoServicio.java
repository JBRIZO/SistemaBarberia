/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.GUI;

import com.mycompany.sistemabarberia.JPACOntrollers.precioshistoricoserviciosJpaController;
import com.mycompany.sistemabarberia.JPACOntrollers.serviciosJpaController;
import com.mycompany.sistemabarberia.JTextFieldLimit;
import com.mycompany.sistemabarberia.Validaciones;
import com.mycompany.sistemabarberia.precioshistoricoservicios;
import com.mycompany.sistemabarberia.servicios;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author Jonathan Laux
 */
public class nuevoServicio extends javax.swing.JFrame {
    
    private servicios servicioModificar;
    private EntityManagerFactory emf = Persistence.createEntityManagerFactory("servidorbd");
    
    private precioshistoricoserviciosJpaController preciosDAO = new precioshistoricoserviciosJpaController(emf);
    private serviciosJpaController servicioDAO = new serviciosJpaController(emf);
    private Validaciones validar = new Validaciones();
    private List<servicios> serviciosEnBd = servicioDAO.findserviciosEntities();
    private ImageIcon imagen;
    private Icon icono;
    private java.util.Date dt = new java.util.Date();
    private java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
    String currentTime = sdf.format(dt);
    private LocalDate fecha ;
    Border redBorder = BorderFactory.createLineBorder(Color.RED,1);
    Border greenBorder = BorderFactory.createLineBorder(Color.GREEN,1);
    Border defaultBorder = new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true);

    /**
     * Creates new form nuevoTipoDescuento
     */
    public nuevoServicio() {
        initComponents();
        this.setLocationRelativeTo(null);
        Image icon = new ImageIcon(getClass().getResource("/Imagenes/logoBarberia.jpeg")).getImage();
        setIconImage(icon);
        this.insertarImagen(this.logo,"/Imagenes/logoBarberia.png");
        Reiniciar();    
    }
    
    public nuevoServicio(servicios servicioModificar)
    {
       this.servicioModificar = servicioModificar;
       initComponents();
       this.setLocationRelativeTo(null);
       Image icon = new ImageIcon(getClass().getResource("/Imagenes/logoBarberia.jpeg")).getImage();
        setIconImage(icon);
        this.insertarImagen(this.logo,"/Imagenes/logoBarberia.png");
       precioInicial.setEnabled(false);
       tituloPantalla.setText("MODIFICAR SERVICIO");
       idServicio.setText("Id de Servicio: " + servicioModificar.getIdservicio());
       nombreServicio.setText(servicioModificar.getNomServicio());
       formatoInvalido.setVisible(false);
    }
    
    public void Reiniciar()
    {
        List<servicios> serviciosEnBd = servicioDAO.findserviciosEntities();
        if (serviciosEnBd.isEmpty())
        {
            idServicio.setText("  ID de Servicio: 1");
        }else
        {
            idServicio.setText("  ID de Servicio: " + Integer.toString(serviciosEnBd.get(serviciosEnBd.size()-1).getIdservicio()+1));
        } 
        
        nombreServicio.setText("Nombre Servicio");
        precioInicial.setText("Precio");
        nombreServicio.setBorder(defaultBorder);
        precioInicial.setBorder(defaultBorder);
        formatoInvalido.setVisible(false);
        formatoInvalido2.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tituloPantalla = new javax.swing.JLabel();
        botonAceptar = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        idServicio = new javax.swing.JTextField();
        formatoInvalido = new javax.swing.JLabel();
        precioInicial = new javax.swing.JTextField();
        nombreServicio = new javax.swing.JTextField();
        formatoInvalido2 = new javax.swing.JLabel();
        salir = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(20, 17, 17));

        tituloPantalla.setFont(new java.awt.Font("Gadugi", 1, 24)); // NOI18N
        tituloPantalla.setForeground(new java.awt.Color(255, 255, 255));
        tituloPantalla.setText("NUEVO SERVICIO");

        botonAceptar.setBackground(new java.awt.Color(189, 158, 76));
        botonAceptar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        botonAceptar.setText("ACEPTAR");
        botonAceptar.setRequestFocusEnabled(false);
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });

        logo.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(55, 53, 53));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel2.setMaximumSize(new java.awt.Dimension(421, 280));
        jPanel2.setMinimumSize(new java.awt.Dimension(421, 280));

        jPanel3.setBackground(new java.awt.Color(55, 53, 53));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel3.setMaximumSize(new java.awt.Dimension(358, 219));
        jPanel3.setMinimumSize(new java.awt.Dimension(358, 219));

        idServicio.setEditable(false);
        idServicio.setBackground(new java.awt.Color(30, 33, 34));
        idServicio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        idServicio.setForeground(new java.awt.Color(255, 255, 255));
        idServicio.setText(" Id de Servicio");
        idServicio.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        idServicio.setSelectionColor(new java.awt.Color(55, 53, 53));
        idServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idServicioActionPerformed(evt);
            }
        });

        formatoInvalido.setForeground(new java.awt.Color(255, 255, 255));
        formatoInvalido.setText("Formato no valido.");

        precioInicial.setBackground(new java.awt.Color(30, 33, 34));
        precioInicial.setDocument(new JTextFieldLimit(7));
        precioInicial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        precioInicial.setForeground(new java.awt.Color(255, 255, 255));
        precioInicial.setText("   Precio Inicial");
        precioInicial.setToolTipText("Ingrese un precio de servicio v√°lido.");
        precioInicial.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        precioInicial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                precioInicialFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                precioInicialFocusLost(evt);
            }
        });
        precioInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioInicialActionPerformed(evt);
            }
        });
        precioInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                precioInicialKeyTyped(evt);
            }
        });

        nombreServicio.setBackground(new java.awt.Color(30, 33, 34));
        nombreServicio.setDocument(new JTextFieldLimit(25));
        nombreServicio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreServicio.setForeground(new java.awt.Color(255, 255, 255));
        nombreServicio.setText("   Nombre del Nuevo Servicio");
        nombreServicio.setToolTipText("Ingrese un nombre de servicio valido.");
        nombreServicio.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        nombreServicio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nombreServicioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nombreServicioFocusLost(evt);
            }
        });
        nombreServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreServicioActionPerformed(evt);
            }
        });
        nombreServicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreServicioKeyTyped(evt);
            }
        });

        formatoInvalido2.setForeground(new java.awt.Color(255, 255, 255));
        formatoInvalido2.setText("Formato no valido.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formatoInvalido2)
                    .addComponent(precioInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatoInvalido)
                    .addComponent(idServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 42, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(idServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(formatoInvalido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombreServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(formatoInvalido2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precioInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/x.png"))); // NOI18N
        salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salirMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(tituloPantalla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 35, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(botonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(49, 49, 49))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tituloPantalla)
                        .addGap(18, 18, 18)))
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
        try{
        if(servicioModificar != null)
        {
            if(nombreServicio.getText().equals("")||nombreServicio.getText().equals("Nombre Servicio"))
        {
           JOptionPane.showMessageDialog(this,"Debes de rellenar todos los campos","Campos incompletos",JOptionPane.ERROR_MESSAGE);
           return;
        }
          servicioModificar.setNomServicio(nombreServicio.getText());
          if(validacionCamposTexto())
          {
            try {
                servicioDAO.edit(servicioModificar);
                JOptionPane.showMessageDialog(this,"¬°Servicio Modificado!");
            } catch (Exception ex) {
                Logger.getLogger(nuevoServicio.class.getName()).log(Level.SEVERE, null, ex);
            }  
          }else{JOptionPane.showMessageDialog(this, "Por favor corrige el nombre del servicio.","Nombre Inv√°lido",JOptionPane.ERROR_MESSAGE);}  
        }else
        {
             if(nombreServicio.getText().equals("")||nombreServicio.getText().equals("Nombre Servicio")||
                precioInicial.getText().equals("Precio")||precioInicial.getText().equals(""))
        {
           JOptionPane.showMessageDialog(this,"Debes de rellenar todos los campos","Campos incompletos",JOptionPane.ERROR_MESSAGE);
           return;
        }
            //anadir servicio
        List<servicios> serviciosEnBd = servicioDAO.findserviciosEntities();
        String txt = nombreServicio.getText();
        servicios servicioNuevo = new servicios();
        servicioNuevo.setNomServicio(nombreServicio.getText());
        servicioNuevo.setActivo(true);
        
        //anadir precio 1
        precioshistoricoservicios precioUno = new precioshistoricoservicios();
        precioUno.setFechaInicial(Date.valueOf(currentTime));
        precioUno.setFechaFinal(null);
        precioUno.setActivo(true);
        
        for(int i=0; i < serviciosEnBd.size();i++)
        {
            if(servicioNuevo.getNomServicio().equalsIgnoreCase(serviciosEnBd.get(i).getNomServicio()))
            {
            Border redBorder = BorderFactory.createLineBorder(Color.RED,1);
            nombreServicio.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Ese servicio ya existe.");
            return;
            }
        }
           
        if(validacionCamposTexto() && validacionNumerica()){
            try {
            precioUno.setPrecio(Double.parseDouble(precioInicial.getText()));
            servicioDAO.create(servicioNuevo); 
            List<servicios> servicios = servicioDAO.findserviciosEntities();
            precioUno.setIDServicio((servicios.get(servicios.size()-1)).getIdservicio());  
            preciosDAO.create(precioUno);    
            JOptionPane.showMessageDialog(null,"Operaci√≥n Exitosa.");
                    Reiniciar();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,"No se pudo guardar el servicio, excepci√≥n: " + ex.getMessage());
        }
        }else{JOptionPane.showMessageDialog(null, "Por favor, corrige los campos en rojo.","Datos inv√°lidos",JOptionPane.ERROR_MESSAGE);}
        }
        }catch(Exception ex){
            log(ex);
        }
        
    }//GEN-LAST:event_botonAceptarActionPerformed

    
    
    private void idServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idServicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idServicioActionPerformed
//a;adir validaciones botonaceptar
    private void precioInicialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_precioInicialFocusLost
        try{
        validacionNumerica();
        }catch(Exception ex){
            log(ex);
        }
    }//GEN-LAST:event_precioInicialFocusLost

    
    
    private void precioInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precioInicialActionPerformed

    private void precioInicialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioInicialKeyTyped
        // TODO add your handling code here
    }//GEN-LAST:event_precioInicialKeyTyped

    private void precioInicialFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_precioInicialFocusGained
        // TODO add your handling code here:
        precioInicial.selectAll();
    }//GEN-LAST:event_precioInicialFocusGained

    private void nombreServicioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreServicioFocusGained
        // TODO add your handling code here:
        nombreServicio.selectAll();
    }//GEN-LAST:event_nombreServicioFocusGained

    private void nombreServicioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreServicioFocusLost
        // TODO add your handling code here
        try{
        validacionCamposTexto(); 
        }catch(Exception ex){
            log(ex);
        } 
    }//GEN-LAST:event_nombreServicioFocusLost

    private void nombreServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreServicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreServicioActionPerformed

    private void nombreServicioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreServicioKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreServicioKeyTyped

    private void salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salirMouseClicked
        // TODO add your handling code here:
        try{
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pantallaServicios().setVisible(true);
            }
        });
        emf.close();
        this.setVisible(false);
        this.dispose(); 
        preciosDAO.close();
        servicioDAO.close(); 
        }catch(Exception ex){
            log(ex);
        }      
    }//GEN-LAST:event_salirMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nuevoServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nuevoServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nuevoServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nuevoServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new nuevoServicio().setVisible(true);
            }
        });
        
        
    }
    
    private boolean validacionNumerica()
    {
         double precio = 0 ;
        try{
            precio = Double.parseDouble(precioInicial.getText());
        }catch(NumberFormatException ex)
        {
            formatoInvalido2.setVisible(true);
            formatoInvalido2.setText("Solo puedes ingresar n√∫meros en este campo.");
            precioInicial.setBorder(redBorder);
            return false;
        }
       
        if(precio <= 0)
        {
            precioInicial.setBorder(redBorder);
            formatoInvalido2.setVisible(true);
            formatoInvalido2.setText("El precio debe ser mayor a 0.");
            return false;
        }
        
         precioInicial.setBorder(greenBorder);
         formatoInvalido2.setVisible(false);
         return true;
        
    }
    
    private boolean validacionCamposTexto()
    {
        if(nombreServicio.getText().equals(""))
        {
            nombreServicio.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Debes ingresar un dato.");
            return false;
        }
        if(nombreServicio.getText().matches("^.*\\d+.*$"))
        {
            nombreServicio.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Solo se permite texto en este campo.");
            return false;
        }
        if(!nombreServicio.getText().matches("^[A-Z]{1}[\\w\\s]+$"))
        {
            nombreServicio.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("El servicio debe iniciar con may√∫scula.");
            return false;
        }
        if(validar.validacionLetrasRepetidas(nombreServicio.getText()))
        {
            nombreServicio.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("No puedes repetir tantas letras.");
            return false;
        }
        
        if(!validar.validacionCadenaPalabras(nombreServicio.getText()))
        {
            nombreServicio.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("Esa no es una palabra v√°lida.");
            return false;
        }
        if(!validar.validacionCantidadMinima(nombreServicio.getText(), 4))
        {
            nombreServicio.setBorder(redBorder);
            formatoInvalido.setVisible(true);
            formatoInvalido.setText("El servicio debe ser de m√≠nimo 4 letras.");
            return false;
        }
        nombreServicio.setBorder(greenBorder);
        formatoInvalido.setVisible(false);
        return true;
      
    }
    
    private void insertarImagen(JLabel lbl,String ruta)
    {
        this.imagen = new ImageIcon(getClass().getResource(ruta));
        this.icono = new ImageIcon(
                this.imagen.getImage().getScaledInstance(
                        lbl.getWidth(), 
                        lbl.getHeight(),
                        Image.SCALE_DEFAULT)
        );
        lbl.setIcon(this.icono);
        this.repaint();
    }
    
    public boolean validarCamposEnBlanco(){
        if(nombreServicio.getText().equals("")||precioInicial.getText().equals(""))
        {
           return false;
        }else{return true;}
    }
    
    private void log(Exception ex){
        FileHandler fh;                              
            java.util.logging.Logger logger = java.util.logging.Logger.getLogger("Log");  
            try {
                Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                String ts = new SimpleDateFormat("dd MMMM yyyy HH.mm.ss").format(timestamp);
                fh = new FileHandler("../logs/"+ ts + " " + this.getClass().getName()+".txt" );
                logger.addHandler(fh);
                SimpleFormatter formatter = new SimpleFormatter();
                fh.setFormatter(formatter);
                logger.info(ex.getClass().toString() + " : " +ex.getMessage());
            } catch (SecurityException e) {  
                e.printStackTrace();  
            } catch (IOException e) {  
                e.printStackTrace();  
            } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptar;
    private javax.swing.JLabel formatoInvalido;
    private javax.swing.JLabel formatoInvalido2;
    private javax.swing.JTextField idServicio;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel logo;
    public javax.swing.JTextField nombreServicio;
    public javax.swing.JTextField precioInicial;
    private javax.swing.JLabel salir;
    private javax.swing.JLabel tituloPantalla;
    // End of variables declaration//GEN-END:variables
}
